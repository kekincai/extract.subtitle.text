皆さんこんにちは特化型です今回は開発実況シリーズ、web、日報登録システムの第16回ということで前回の続きを進めていきたいと、おもいます。
僕のチャンネルではプログラミングのスキルアップに役立つ情報や開発実況なくの動画、を配信していますのでプログラミングを学習中の方はぜひチャンネル登録、お願いします。
現在はこのようなアプリの仕上げ作業を行っています。
前回はマルニのセキュリティ対策を行いました。
ユーザーのパスワードと個人情報のアンコウカー、脆弱性対策のためのクロスサイトスクリプティングや、クロスサイトリクエストフォージェリ対策の実装を行いましたね。
今回はマールさんのリファクタリングを行っていきましょう。
これで開発フェーズは一通り完了となります。
[音楽]、ん、の、ん、ん、リファクタリングとはアプリの動作自体は変えずに、ソースコードを内部的に整理していく作業です。
これまでの動画でも見て来ていただいたように開発中は機能を実現することを優先して、コーディングを行っていますので、昨日が動きはするもののソースコード的には結構効率の悪い書き方をして、いかに後から見たときに分かりづらい可読性の低い高度になっていたりします。
そういった部分をアプリの某鯖そのままに綺麗に書き直していく作業のことをリ、ファクタリングと言います。
宇治実際の開発現場では当たり前に行われている作業工程ですがプログラミングの入門、書のではあまり取り上げられることがないです。
ん、作業としてはそれほど大変なものではないのですが、リファクタリングをやっておくかどうかで今後のアプリのメンテナンセイヤー、不具合が発生した場合の調査時間の短縮などにもつながるため結構重要な作業なんです。
リファクタリングにはいろいろなやり方がありますが今回のアプリはソースコードの数、もそれほど多くなくシンプルな、後世のためこのような基本的なアプローチを実施していきますそれでは上から順番に、進めていきましょう。
まずは各ソースコードの掃除から始めていきましょう。
ソースコード内の不要な空白行やデバッグ分、不要なコメントなどを削除して経営にしていきます。
[音楽]、また逆にコメントが不足していてわかりづらいなぁと思う部分にはこんな感じで、コメントを追記していきます。
[音楽]、[音楽]、ここでこの作業を行う前提ながらそう、機能開発時はスピードいう宣伝雨にコーディングすることができます。
昨日開発時にソースコードをきれいに整えることまで意識して帰っていると、開発スピードが遅くなってしまうのでまずは機能を実現することを優先してその後で、ソースコードをきれいにするというふうに段階を分けた方が開発をスムーズに進め、られると思います皆さんもぜひ試してみて、ません。
正しいチーム開発をしている場合は自分の書いたソースコードをリモートリポジトリー、にプッシュする前にキレイに整えるようにしましょう。
次は処理の共通化を行っていきます処理の共通化タワー、ソースコードのいろいろな場所に書かれている同じような処理を置くぷりだして共通、関数として一元管理することです。
例えばこの時間を形式チェック処理ですが、ソース内に3カ所同じチェック処理を変えていますね。
これは社員側の日報登録画面のソースですが管理者側のソースにも同様の処理が書かれ、ています。
なのでこの処理を共通関数がしてまとめてしまいましょう。
共通関数用のファンクションず、php、に新しい関数を定義して、[音楽]、処理内容をそのままコピーしてきます。
引数で与えられた値をチェックするように変更して、チェック結果が、ok、の場合は、true、ng、の場合はフォルスを返すようにします。
これで共通関数彼は、ok、です。
あとはチェックを行いたい部分で処理を直接書くのではなく、このように先ほど作った関数を呼び出すようにすれば、ok、です。
[音楽]、このようにアプリの動きとしては修正前と全く変わりませんが、ソースコードの内部的にはこのように各処理が簡素化されて見やすくなり、チェック処理も複数カ所に点在することが風、このように関数として次元管理されているのでもし後からチェックの仕様が変わり、正規表現を調整する、この場合も修正はこの一箇所だけで済みますね。
あとはこの、header、関数で別画面にリダイレクトさせる処理もいろいろな場所、で登場しますが、処理は毎回同じなので関数化してしまいましょう。
[音楽]、[音楽]、これでいいですね。
[音楽]、各処理の中で別画面に遷移させる時はリダイレクトと一時を履くだけで、ok、です。
ソースコードがより簡素化されて見やすくなりました。
[音楽]、次は、html、レイアウトの共通化作業を行っています。
html、文もこの、head、タグや、ログ部分など全画面で共通のエリアがいくつかあります。
これらは別ファイル化して共通化してしまいましょう。
まずは、head、タグ、共通レイアウトを格納するための10プレースフォルダーを作り、その中にヘッドダグ、php、を新規作成します。
ここに、head、タグ全体を移設します。
元の、php、側ではこのヘッド、tags、php、をインクルードするように指定、します。
[音楽]、こうしておけば前、php、に毎回同じ、head、タグを書かなくても、improve、分を1行書くだけです御感想がされます。
なおタイトル部分は画面ごとに異なるため変数化して読み込むようにします。
[音楽]、これで、ok、ですね。
[音楽]、同じようにヘッダ部分を共通化しておきましょう。
[音楽]、[音楽]、[音楽]、[音楽]、これで各、php、の、html、ビューはその場面独自の部分のみが残り、だいぶ簡素化されましたね。
メンテナンスもしやすくなったと思います。
関数の時と同じように例えばロゴが蘇芳別のものに差し替えたいとか色々アナ、リティクスなどの追加タグを、head、タグ内に組み込みたいといったことがあった場合にも、全画面を一つ一つ修正する必要なくこのテンプレートファイルを1箇所をいじるだけで、済みます。
このようにアプリの動作自体は変わらないままライブ的にソースコードをキレイに整え、て、可読性やメンテナンス性を向上させていくのがリファクタリングという作業です。
このソースコードに行った作業を他の行動にも同じように適用していけば今回のアプリ、のリファクタリングはひとまず、ok、です。
あとは最終調整として槍の穂している部分がないかどうかチェックしていきます。
[音楽]、[音楽]、このアプリにはまだファビコンを設定していなかったので最後にファビコンを設定して、おきましょう。
路傍もとに浴び今生成サイトで作成します。
[音楽]、[音楽]、阿部今は、head、タグに組み込む必要があるため先ほど共通化したヘッド、tags、php、に組み込めます。
テンプレート化する前であれば全、php、に来る子もなければならないところでした、いきなりリファクタリングの、ok、が受けられましたね。
[音楽]、[音楽]、これで、ok、です。
画面をリロードすると、我孫子んが設定されました。
これで今回の作業は完了です。
ということで今回はまるさんのリファクタリングを行いました。
今回はアプリの動作としては目に見えて変わる部分はほとんどありませんでしたが内部、的なソースコードとしては整理され、メンテナンス性が向上しました。
今後のプログラムの品質の上ではとても重要な作業です皆さんもアプリを作る際は忘れ、ずにリファクタリングを実施してください、さてこれで開発フェーズは全て完了です。
次回は最終工程である検証フェーズを進めていきましょうというわけで今回は以上に、なります。
アプレチャンネルでは実践的なプログラミングスキルを分かりやすく発信しています。
アップされている動画をひと通り見ていただくと、web、エンジニアの幅広いスキル、頑張りますのでぜひチャンネル登録、6ので暗号化をご覧下さいまた僕の運営しているオンラインプログラミング講座では、プログラミングスプールを1ステップずつ順番に学んでいき、全くの出身者からでもうプロレベルに到達することができるカリキュラムになってい、ますので、プログラミングスキルを本気で学んでいきたい方はぜひ概要欄、padi、すそれ、じゃあ、ん、ん、[音楽]。
